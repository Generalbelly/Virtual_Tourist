[
 {
  "file": "/Users/shimmennobuyoshi/Downloads/Virtual_Tourist-master/Virtual_Tourist/TravelLocationMapViewController.swift",
  "offset": 2602,
  "remove": 3797,
  "text": ": [AnyObject]?\n        do {\n            results = try sharedContext().executeFetchRequest(fetchRequest)\n        } catch let error1 as NSError {\n            error = error1\n            results = nil\n        }\n        if error != nil {\n            self.displayAlertView(\"Sorry, error occured for some reason...\")\n        }\n        return results as! [Location]\n    }\n\n    func displayAlertView(message: String) {\n        let alertController = UIAlertController(title: \"Loading pictures Failed\", message: message, preferredStyle: .Alert)\n        let action = UIAlertAction(title: \"OK\", style: .Default) { (action) in\n            self.dismissViewControllerAnimated(true, completion: nil)\n        }\n        alertController.addAction(action)\n        self.presentViewController(alertController, animated: true, completion: nil)\n    }\n\n    func mapAllThePlaces(places: [Location]) {\n        let annotations = places.map() {\n            place -> MKPointAnnotation in\n            return place.pin\n        }\n        self.mapView.addAnnotations(annotations)\n    }\n\n    func sharedContext() -> NSManagedObjectContext {\n        return CoreDataStackManager.sharedInstance().managedObjectContext!\n    }\n\n    lazy var temporaryContext: NSManagedObjectContext = {\n        var context = NSManagedObjectContext(concurrencyType: NSManagedObjectContextConcurrencyType.MainQueueConcurrencyType)\n        context.persistentStoreCoordinator = self.sharedContext().persistentStoreCoordinator\n        return context\n    }()\n\n    func enableUserPin() {\n        let lpgr = UILongPressGestureRecognizer(target: self, action: \"action:\")\n        lpgr.minimumPressDuration = 2\n        self.mapView.addGestureRecognizer(lpgr)\n    }\n\n    func action(gestureRecognizer: UIGestureRecognizer) {\n        let gestureState = gestureRecognizer.state\n        switch gestureState {\n        case .Began:\n            createDragEffect(gestureRecognizer)\n        case .Changed:\n            createDragEffect(gestureRecognizer)\n        case .Ended:\n            destinationSet(gestureRecognizer)\n        default:\n            break\n        }\n    }\n\n    func createDragEffect(gestureRecognizer: UIGestureRecognizer){\n        var temporaryDestinations = [MKPointAnnotation]()\n        let wayPoints = gestureRecognizer.locationInView(self.mapView)\n        let location: CLLocationCoordinate2D = self.mapView.convertPoint(wayPoints, toCoordinateFromView: self.mapView)\n        let temporaryDestination = Location(wayPoints: location, context: temporaryContext)\n        temporaryDestinations.append(temporaryDestination.pin)\n        self.mapView.addAnnotation(temporaryDestination.pin)\n    }\n\n    func destinationSet(gestureRecognizer: UIGestureRecognizer) {\n        self.mapView.removeAnnotations(self.mapView.annotations)\n        let wayPoints = gestureRecognizer.locationInView(self.mapView)\n        let location: CLLocationCoordinate2D = self.mapView.convertPoint(wayPoints, toCoordinateFromView: self.mapView)\n        self.destination = Location(wayPoints: location, context: sharedContext())\n        self.destinations.append(destination!)\n        CoreDataStackManager.sharedInstance().saveContext()\n        self.mapAllThePlaces(self.destinations)\n        self.fetchPictures(self.destinations.last!)\n    }\n\n    func fetchPictures(destination: Location) {\n        if self.destination!.pictures.isEmpty {\n            FlickrClient.sharedInstance.getImagesFromFlickr(self.destination!) { success, dic, error in\n                dispatch_async(dispatch_get_main_queue()) {\n                    if success == true && dic != nil {\n                        FlickrClient.sharedInstance.handleFlickr(success, dics: dic!, destination: self.destination!) { completed in self.picturesFetched = true }\n                    }\n                }\n            }\n        } else {\n            self.noImage = true\n        }\n    }\n\n    func mapView(mapView: MKMapView, didSelectAnnotationView view: MKAnnotationView",
 }
]
