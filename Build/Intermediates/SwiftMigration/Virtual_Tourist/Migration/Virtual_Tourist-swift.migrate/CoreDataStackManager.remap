[
 {
  "file": "/Users/shimmennobuyoshi/Downloads/Virtual_Tourist-master/Virtual_Tourist/CoreDataStackManager.swift",
  "offset": 701,
  "remove": 2099,
  "text": "\n        }()\n    \n    lazy var managedObjectModel: NSManagedObjectModel = {\n        let modelURL = NSBundle.mainBundle().URLForResource(\"Virtual_Tourist\", withExtension: \"momd\")!\n        return NSManagedObjectModel(contentsOfURL: modelURL)!\n        }()\n\n    lazy var persistentStoreCoordinator: NSPersistentStoreCoordinator? = {\n\n        var coordinator: NSPersistentStoreCoordinator? = NSPersistentStoreCoordinator(managedObjectModel: self.managedObjectModel)\n        let url = self.applicationDocumentsDirectory.URLByAppendingPathComponent(SQLITE_FILE_NAME)\n        var error: NSError? = nil\n        do {\n            try coordinator!.addPersistentStoreWithType(NSSQLiteStoreType, configuration: nil, URL: url, options: nil)\n        } catch var error1 as NSError {\n            error = error1\n            coordinator = nil\n            // Report any error we got.\n            let dict = NSMutableDictionary()\n            dict[NSLocalizedDescriptionKey] = \"Failed to initialize the application's saved data\"\n            dict[NSLocalizedFailureReasonErrorKey] = \"There was an error creating or loading the application's saved data.\"\n            dict[NSUnderlyingErrorKey] = error\n            error = NSError(domain: \"YOUR_ERROR_DOMAIN\", code: 9999, userInfo: dict as [NSObject : AnyObject])\n\n            // Left in for development development.\n            NSLog(\"Unresolved error \\(error), \\(error!.userInfo)\")\n            abort()\n        } catch {\n            fatalError()\n        }\n        \n        return coordinator\n        }()\n    \n    lazy var managedObjectContext: NSManagedObjectContext? = {\n        let coordinator = self.persistentStoreCoordinator\n        if coordinator == nil {\n            return nil\n        }\n        var managedObjectContext = NSManagedObjectContext()\n        managedObjectContext.persistentStoreCoordinator = coordinator\n        return managedObjectContext\n        }()\n\n    func saveContext () {\n\n        if let context = self.managedObjectContext {\n        \n            var error: NSError? = nil\n            \n            if context.hasChanges {\n                do {\n                    try context.save()\n                } catch let error1 as NSError {\n                    error = error1\n                    NSLog(\"Unresolved error \\(error), \\(error!.userInfo)\")\n                    abort()\n                }",
 }
]
